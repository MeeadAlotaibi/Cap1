{"ast":null,"code":"var _jsxFileName = \"/Users/meeadalotaibi/Desktop/T1000/W4/cap1/src/components/Card/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Card = props => {\n  _s();\n\n  const cards = props.cards; // const vidio = props.video;\n\n  const numOfCards = Number(useParams().id);\n  const [newCards, setNewCards] = useState([]);\n  const [openedCard, setOpenedCard] = useState([]);\n  const [matched, setMatched] = useState([]);\n  const [counter, setCounter] = useState(60);\n  const navigate = useNavigate();\n\n  function flipCard(index) {\n    if (!openedCard.includes(index)) {\n      setOpenedCard(opened => [...opened, index]);\n    }\n  }\n\n  const newStart = () => {\n    setMatched([]);\n    setOpenedCard([]);\n    setCounter(60);\n  };\n\n  useEffect(() => {\n    const timer = counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\n\n    if (counter === 0 && matched.length < numOfCards) {\n      alert(\"Time's up, you're lost, try again\");\n      setMatched([]);\n      setOpenedCard([]);\n      setCounter(60);\n    }\n\n    if (counter > 0 && matched.length === numOfCards) {\n      alert(\"congratulations for winning, try again\");\n      setMatched([]);\n      setOpenedCard([]);\n      setCounter(60);\n    }\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [counter]);\n  useEffect(() => {\n    if (openedCard < 2) return;\n    const firstMatched = newCards[openedCard[0]];\n    const secondMatched = newCards[openedCard[1]];\n\n    if (secondMatched && firstMatched.id === secondMatched.id) {\n      setMatched([...matched, firstMatched.id]);\n    }\n\n    if (openedCard.length === 2) setTimeout(() => setOpenedCard([]), 1000);\n  }, [openedCard]);\n  useEffect(() => {\n    let cardsNums = [];\n    let cardsNumsEle = [];\n\n    while (cardsNums.length !== numOfCards) {\n      const randomCard = Math.floor(Math.random() * cards.length);\n\n      if (!cardsNums.includes(randomCard)) {\n        cardsNums.push(randomCard);\n        cardsNumsEle.push(cards[randomCard]);\n      }\n    }\n\n    cardsNums.length = 0;\n\n    while (cardsNums.length !== numOfCards) {\n      const randomCard = Math.floor(Math.random() * numOfCards);\n\n      if (!cardsNums.includes(randomCard)) {\n        cardsNums.push(randomCard);\n        cardsNumsEle.push(cardsNumsEle[randomCard]);\n      }\n    }\n\n    setNewCards([...cardsNumsEle]);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"counter\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => newStart(),\n        className: \"time\",\n        children: \"newStart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"time\",\n        children: [\" Lift Time : \", counter, \" s.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards\",\n      children: newCards.map((item, i) => {\n        let isFlip = false;\n\n        if (openedCard.includes(i)) {\n          isFlip = true;\n        }\n\n        if (matched.includes(item.id)) isFlip = true;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card ${isFlip ? \"flipped\" : \"\"}`,\n          onClick: () => flipCard(i),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inner\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"front\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: item.img,\n                alt: \"card img\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Card, \"gd7dG5ymHkS1NyJ/dyX14Qpf9f8=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/Users/meeadalotaibi/Desktop/T1000/W4/cap1/src/components/Card/index.js"],"names":["React","useEffect","useState","useParams","useNavigate","Card","props","cards","numOfCards","Number","id","newCards","setNewCards","openedCard","setOpenedCard","matched","setMatched","counter","setCounter","navigate","flipCard","index","includes","opened","newStart","timer","setInterval","length","alert","clearInterval","firstMatched","secondMatched","setTimeout","cardsNums","cardsNumsEle","randomCard","Math","floor","random","push","map","item","i","isFlip","img"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport \"./style.css\";\n\nconst Card = (props) => {\n  const cards = props.cards;\n  // const vidio = props.video;\n  const numOfCards = Number(useParams().id);\n  const [newCards, setNewCards] = useState([]);\n  const [openedCard, setOpenedCard] = useState([]);\n  const [matched, setMatched] = useState([]);\n  const [counter, setCounter] = useState(60);\n  const navigate = useNavigate();\n\n  function flipCard(index) {\n    if (!openedCard.includes(index)) {\n      setOpenedCard((opened) => [...opened, index]);\n    }\n  }\n\n  const newStart = () => {\n    setMatched([]);\n    setOpenedCard([]);\n    setCounter(60);\n  };\n\n  useEffect(() => {\n    const timer =\n      counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\n\n    if (counter === 0 && matched.length < numOfCards) {\n      alert(\"Time's up, you're lost, try again\");\n      setMatched([]);\n      setOpenedCard([]);\n      setCounter(60);\n    }\n    if (counter > 0 && matched.length === numOfCards) {\n      alert(\"congratulations for winning, try again\");\n      setMatched([]);\n      setOpenedCard([]);\n      setCounter(60);\n    }\n    return () => {\n      clearInterval(timer);\n    };\n  }, [counter]);\n\n  useEffect(() => {\n    if (openedCard < 2) return;\n\n    const firstMatched = newCards[openedCard[0]];\n    const secondMatched = newCards[openedCard[1]];\n\n    if (secondMatched && firstMatched.id === secondMatched.id) {\n      setMatched([...matched, firstMatched.id]);\n    }\n\n    if (openedCard.length === 2) setTimeout(() => setOpenedCard([]), 1000);\n  }, [openedCard]);\n\n  useEffect(() => {\n    let cardsNums = [];\n    let cardsNumsEle = [];\n    while (cardsNums.length !== numOfCards) {\n      const randomCard = Math.floor(Math.random() * cards.length);\n\n      if (!cardsNums.includes(randomCard)) {\n        cardsNums.push(randomCard);\n        cardsNumsEle.push(cards[randomCard]);\n      }\n    }\n\n    cardsNums.length = 0;\n\n    while (cardsNums.length !== numOfCards) {\n      const randomCard = Math.floor(Math.random() * numOfCards);\n\n      if (!cardsNums.includes(randomCard)) {\n        cardsNums.push(randomCard);\n        cardsNumsEle.push(cardsNumsEle[randomCard]);\n      }\n    }\n\n    setNewCards([...cardsNumsEle]);\n  }, []);\n\n  return (\n    <div className=\"counter\">\n      <div className=\"timer\">\n        <button onClick={() => newStart()} className=\"time\">\n          newStart\n        </button>\n        <h3 className=\"time\"> Lift Time : {counter} s.</h3>\n      </div>\n\n      <div className=\"cards\">\n        {newCards.map((item, i) => {\n          let isFlip = false;\n\n          if (openedCard.includes(i)) {\n            isFlip = true;\n          }\n          if (matched.includes(item.id)) isFlip = true;\n          return (\n            <div\n              key={i}\n              className={`card ${isFlip ? \"flipped\" : \"\"}`}\n              onClick={() => flipCard(i)}\n            >\n              <div className=\"inner\">\n                <div className=\"front\">\n                  <img src={item.img} alt=\"card img\" />\n                </div>\n                <div className=\"back\"></div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}